diff -ur m4ul-3.4.10-g7de23fa.orig/arch/arm/configs/m4_defconfig m4ul-3.4.10-g7de23fa/arch/arm/configs/m4_defconfig
--- m4ul-3.4.10-g7de23fa.orig/arch/arm/configs/m4_defconfig	2014-07-09 22:29:05.000000000 +0900
+++ m4ul-3.4.10-g7de23fa/arch/arm/configs/m4_defconfig	2014-07-24 13:52:40.283587840 +0900
@@ -385,6 +385,7 @@
 # CONFIG_TOUCHSCREEN_CYTTSP_I2C_QC is not set
 # CONFIG_TOUCHSCREEN_CYTTSP_I2C is not set
 CONFIG_TOUCHSCREEN_SYNAPTICS_3K=y
+CONFIG_TOUCHSCREEN_SYNAPTICS_SWEEP2WAKE=y
 CONFIG_INPUT_MISC=y
 # CONFIG_INPUT_PMIC8XXX_PWRKEY is not set
 CONFIG_INPUT_UINPUT=y
diff -ur m4ul-3.4.10-g7de23fa.orig/drivers/input/touchscreen/Kconfig m4ul-3.4.10-g7de23fa/drivers/input/touchscreen/Kconfig
--- m4ul-3.4.10-g7de23fa.orig/drivers/input/touchscreen/Kconfig	2014-07-09 22:28:55.000000000 +0900
+++ m4ul-3.4.10-g7de23fa/drivers/input/touchscreen/Kconfig	2014-07-24 13:54:34.487585252 +0900
@@ -997,6 +997,11 @@
 	help
 	  This enables support for Synaptics RMI4 over I2C based touchscreens.
 
+config TOUCHSCREEN_SYNAPTICS_SWEEP2WAKE
+	bool "Sweep2Wake for SYNAPTICS_3K based touchscreens"
+	depends on TOUCHSCREEN_SYNAPTICS_3K
+	default n
+
 config TOUCHSCREEN_MAX11871
         tristate "Maxim max11871 touchscreen"
         depends on I2C
diff -ur m4ul-3.4.10-g7de23fa.orig/drivers/input/touchscreen/synaptics_3200.c m4ul-3.4.10-g7de23fa/drivers/input/touchscreen/synaptics_3200.c
--- m4ul-3.4.10-g7de23fa.orig/drivers/input/touchscreen/synaptics_3200.c	2014-07-09 22:28:45.000000000 +0900
+++ m4ul-3.4.10-g7de23fa/drivers/input/touchscreen/synaptics_3200.c	2014-07-24 14:29:17.903538687 +0900
@@ -2,6 +2,9 @@
  *
  * Copyright (C) 2011 HTC Corporation.
  *
+ * Sweep2wake and Doubletap2wake for HTC One / One mini is ported from:
+ * Sweep2wake and Doubletap2wake with pocket detection for HTC One
+ * Copyright (C) 2013 Aaron Segaert aka flar2 (asegaert at gmail.com)
  *
  * This software is licensed under the terms of the GNU General Public
  * License version 2, as published by the Free Software Foundation, and
@@ -194,6 +197,186 @@
 	}
 }
 
+#ifdef CONFIG_TOUCHSCREEN_SYNAPTICS_SWEEP2WAKE
+
+#define S2W_START 3
+#define S2W_TIMEOUT 35
+#define S2W_TIMEOUT2 60
+#define S2W_TIMEOUT3 70
+#define DT2W_TIMEOUT_MAX 400
+
+#if defined(CONFIG_MACH_M7_UL)
+# define DT2W_DELTA 240
+#elif defined(CONFIG_MACH_M4_UL)
+# define DT2W_DELTA 160
+#else
+# define DT2W_DELTA 160
+#endif
+
+static bool scr_suspended = false;
+static int button_id = 0;
+static int s2w_switch = 1; // 0=disabled, 1=sweep2wake+sweep2sleep, 2=sweep2sleep only
+static int dt2w_switch = 1; // 0=disabled, 1&2=doubletap2wake
+static int s2w_hist[2] = {0, 0};
+static unsigned long s2w_time[3] = {0, 0, 0};
+static unsigned long pwrtrigger_time[2] = {0, 0};
+
+static struct input_dev * sweep2wake_pwrdev = NULL;
+static DEFINE_MUTEX(pwrkeyworklock);
+
+static void reset_sweep2wake(void)
+{
+	s2w_time[0] = 0;
+	s2w_time[1] = 0;
+	s2w_time[2] = 0;
+
+	s2w_hist[0] = 0;
+	s2w_hist[1] = 0;
+}
+
+static void sweep2wake_presspwr(struct work_struct * sweep2wake_presspwr_work)
+{
+	if (!mutex_trylock(&pwrkeyworklock))
+		return;
+	//pr_info("[TP] [S2W] sweep2wake_presspwr\n");
+	input_report_key(sweep2wake_pwrdev, KEY_POWER, 1);
+	input_sync(sweep2wake_pwrdev);
+	msleep(60);
+	input_report_key(sweep2wake_pwrdev, KEY_POWER, 0);
+	input_sync(sweep2wake_pwrdev);
+	msleep(60);
+
+	mutex_unlock(&pwrkeyworklock);
+	return;
+}
+static DECLARE_WORK(sweep2wake_presspwr_work, sweep2wake_presspwr);
+
+void sweep2wake_pwrtrigger(void)
+{
+	pwrtrigger_time[1] = pwrtrigger_time[0];
+	pwrtrigger_time[0] = jiffies;
+
+	//pr_info("[TP] [S2W] pwrtrigger2=%lu pwrtrigger1=%lu\n", pwrtrigger_time[1], pwrtrigger_time[0]);
+
+	if ((pwrtrigger_time[0] - pwrtrigger_time[1]) < S2W_TIMEOUT3) {
+		//pr_info("[TP] [S2W] not enough time\n");
+		return;
+	}
+	schedule_work(&sweep2wake_presspwr_work);
+	return;
+}
+
+static void sweep2wake_func(int button)
+{
+	s2w_time[2] = s2w_time[1];
+	s2w_time[1] = s2w_time[0];
+	s2w_time[0] = jiffies;
+
+	if (scr_suspended && s2w_hist[0] == 2)
+		s2w_hist[1] = 0;
+	else
+		s2w_hist[1] = s2w_hist[0];
+
+	s2w_hist[0] = button;
+
+	//pr_info("[S2W] in func button id 1=%i, button id 2= %i\n", s2w_hist[0], s2w_hist[1]);
+	//pr_info("[S2W] in func button time1=%llu, button time2= %llu, button time3= %llu\n", s2w_time[0], s2w_time[1], s2w_time[2]);
+
+	if ((s2w_time[0]-s2w_time[2]) < S2W_TIMEOUT2 && !scr_suspended) {
+		pr_info("[S2W] canceled by timeout2\n");
+		return;
+	}
+
+	if ((s2w_time[0]-s2w_time[1]) < S2W_TIMEOUT && (s2w_time[0]-s2w_time[1]) > S2W_START) {
+
+		if (s2w_switch == 1 && (s2w_hist[1] == 1 && s2w_hist[0] == 2) && scr_suspended) {
+			//pr_info("[S2W] OFF->ON\n");
+			reset_sweep2wake();
+			sweep2wake_pwrtrigger();
+		} else if ((s2w_hist[1] == 2 && s2w_hist[0] == 1) && !scr_suspended) {
+			//printk("[S2W] ON->OFF\n");
+			reset_sweep2wake();
+			sweep2wake_pwrtrigger();
+		} else {
+			reset_sweep2wake();
+			return;
+		}
+	}
+}
+
+static int last_touch_position_x = 0;
+static int last_touch_position_y = 0;
+
+static cputime64_t prev_time;
+static int prev_x = 0, prev_y = 0;
+
+static void reset_dt2wake(void)
+{
+	prev_time = 0;
+	prev_x = 0;
+	prev_y = 0;
+}
+
+static void dt2wake_func(int x, int y, cputime64_t trigger_time)
+{
+	//pr_info("[TP] [S2W] dt2w x=%d y=%d\n", x, y);
+
+	if (prev_time == 0) {
+		prev_time = trigger_time;
+		prev_x = x;
+		prev_y = y;
+	} else if ((trigger_time - prev_time) > DT2W_TIMEOUT_MAX) {
+		prev_time = trigger_time;
+		prev_x = x;
+		prev_y = y;
+	} else {
+		if (((abs(x - prev_x) < DT2W_DELTA) && (abs(y - prev_y) < DT2W_DELTA))
+						|| (prev_x == 0 && prev_y == 0)) {
+			//pr_info("[TP] [S2W] dt2w ON\n");
+			reset_dt2wake();
+			sweep2wake_pwrtrigger();
+		} else {
+			prev_time = trigger_time;
+			prev_x = x;
+			prev_y = y;
+		}
+	}
+}
+
+static int __init get_s2w_opt(char *s2w)
+{
+	if (strcmp(s2w, "0") == 0) {
+		s2w_switch = 0;
+	} else if (strcmp(s2w, "1") == 0) {
+		s2w_switch = 1;
+	} else if (strcmp(s2w, "2") == 0) {
+		s2w_switch = 2;
+	} else {
+		s2w_switch = 0;
+	}
+	return 1;
+}
+
+__setup("s2w=", get_s2w_opt);
+
+static int __init get_dt2w_opt(char *dt2w)
+{
+	if (strcmp(dt2w, "0") == 0) {
+		dt2w_switch = 0;
+	} else if (strcmp(dt2w, "1") == 0) {
+		dt2w_switch = 1;
+	} else if (strcmp(dt2w, "2") == 0) {
+		dt2w_switch = 2;
+	} else {
+		dt2w_switch = 0;
+	}
+	return 1;
+}
+
+__setup("dt2w=", get_dt2w_opt);
+
+#endif
+
 static void syn_page_select(struct i2c_client *client, uint8_t page)
 {
 	struct synaptics_ts_data *ts = i2c_get_clientdata(client);
@@ -1720,6 +1903,82 @@
 
 #endif
 
+#ifdef CONFIG_TOUCHSCREEN_SYNAPTICS_SWEEP2WAKE
+static ssize_t synaptics_sweep2wake_show(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	size_t count = 0;
+	count += sprintf(buf, "%d\n", s2w_switch);
+	return count;
+}
+
+static ssize_t synaptics_sweep2wake_store(struct device *dev,
+		struct device_attribute *attr, const char *buf, size_t count)
+{
+	int value;
+
+	if (sysfs_streq(buf, "0"))
+		value = 0;
+	else if (sysfs_streq(buf, "1"))
+		value = 1;
+	else if (sysfs_streq(buf, "2"))
+		value = 2;
+	else
+		return -EINVAL;
+	if (s2w_switch != value) {
+		// s2w_switch is safe to be changed only when !scr_suspended
+		if (scr_suspended) {
+			reset_sweep2wake();
+			sweep2wake_pwrtrigger();
+			msleep(400);
+		}
+		if (!scr_suspended) {
+			s2w_switch = value;
+		}
+	}
+	return count;
+}
+
+static DEVICE_ATTR(sweep2wake, (S_IWUSR|S_IRUGO),
+	synaptics_sweep2wake_show, synaptics_sweep2wake_store);
+
+static ssize_t synaptics_doubletap2wake_show(struct device *dev, struct device_attribute *attr, char *buf)
+{
+	size_t count = 0;
+	count += sprintf(buf, "%d\n", dt2w_switch);
+	return count;
+}
+
+static ssize_t synaptics_doubletap2wake_store(struct device *dev, struct device_attribute *attr, const char *buf, size_t count)
+{
+	int value;
+
+	if (sysfs_streq(buf, "0"))
+		value = 0;
+	else if (sysfs_streq(buf, "1"))
+		value = 1;
+	else if (sysfs_streq(buf, "2"))
+		value = 2;
+	else
+		return -EINVAL;
+	if (dt2w_switch != value) {
+		// dt2w_switch is safe to be changed only when !scr_suspended
+		if (scr_suspended) {
+			reset_dt2wake();
+			sweep2wake_pwrtrigger();
+			msleep(400);
+		}
+		if (!scr_suspended) {
+			dt2w_switch = value;
+		}
+	}
+	return count;
+}
+
+static DEVICE_ATTR(doubletap2wake, (S_IWUSR|S_IRUGO),
+	synaptics_doubletap2wake_show, synaptics_doubletap2wake_store);
+#endif
+
 enum SR_REG_STATE{
 	ALLOCATE_DEV_FAIL = -2,
 	REGISTER_DEV_FAIL,
@@ -1839,6 +2098,19 @@
 			sysfs_create_file(android_touch_kobj, &dev_attr_disable_cbc.attr))
 			return -ENOMEM;
 
+#ifdef CONFIG_TOUCHSCREEN_SYNAPTICS_SWEEP2WAKE
+	ret = sysfs_create_file(android_touch_kobj, &dev_attr_sweep2wake.attr);
+	if (ret) {
+		printk(KERN_ERR "%s: sysfs_create_file failed\n", __func__);
+		return ret;
+	}
+	ret = sysfs_create_file(android_touch_kobj, &dev_attr_doubletap2wake.attr);
+	if (ret) {
+		printk(KERN_ERR "%s: sysfs_create_file failed\n", __func__);
+		return ret;
+	}
+#endif
+
 #ifdef SYN_WIRELESS_DEBUG
 	ret= gpio_request(ts->gpio_irq, "synaptics_attn");
 	if (ret) {
@@ -1885,6 +2157,10 @@
 	sysfs_remove_file(android_touch_kobj, &dev_attr_htc_event.attr);
 	sysfs_remove_file(android_touch_kobj, &dev_attr_reset.attr);
 	sysfs_remove_file(android_touch_kobj, &dev_attr_sr_en.attr);
+#ifdef CONFIG_TOUCHSCREEN_SYNAPTICS_SWEEP2WAKE
+	sysfs_remove_file(android_touch_kobj, &dev_attr_sweep2wake.attr);
+	sysfs_remove_file(android_touch_kobj, &dev_attr_doubletap2wake.attr);
+#endif
 #ifdef SYN_WIRELESS_DEBUG
 	sysfs_remove_file(android_touch_kobj, &dev_attr_enabled.attr);
 #endif
@@ -2156,6 +2432,11 @@
 				printk(KERN_INFO "[TP] Finger leave\n");
 		}
 
+#ifdef CONFIG_TOUCHSCREEN_SYNAPTICS_SWEEP2WAKE
+		if (dt2w_switch > 0 && scr_suspended && ts->finger_count == 0) {
+			dt2wake_func(last_touch_position_x, last_touch_position_y, ktime_to_ms(ktime_get()));
+		}
+#endif
 		if (ts->pre_finger_data[0][0] < 2 || finger_pressed) {
 			if (ts->package_id < 3400)
 				base = (ts->finger_support + 3) / 4;
@@ -2245,6 +2526,15 @@
 					if ((finger_pressed & BIT(i)) == BIT(i)) {
 						if (ts->block_touch_event == 0) {
 							if (ts->htc_event == SYN_AND_REPORT_TYPE_A) {
+#ifdef CONFIG_TOUCHSCREEN_SYNAPTICS_SWEEP2WAKE
+								last_touch_position_x = finger_data[i][0];
+								last_touch_position_y = finger_data[i][1];
+
+								if (scr_suspended == true) {
+									finger_data[i][0] = -10;
+									finger_data[i][1] = -10;
+								}
+#endif
 								if (ts->support_htc_event) {
 									input_report_abs(ts->input_dev, ABS_MT_AMPLITUDE,
 										finger_data[i][3] << 16 | finger_data[i][2]);
@@ -2265,6 +2555,14 @@
 									finger_data[i][1]);
 								input_mt_sync(ts->input_dev);
 							} else if (ts->htc_event == SYN_AND_REPORT_TYPE_B) {
+#ifdef CONFIG_TOUCHSCREEN_SYNAPTICS_SWEEP2WAKE
+								last_touch_position_x = finger_data[i][0];
+								last_touch_position_y = finger_data[i][1];
+								if (scr_suspended == true) {
+									finger_data[i][0] = -10;
+									finger_data[i][1] = -10;
+								}
+#endif
 								if (ts->support_htc_event) {
 									input_report_abs(ts->input_dev, ABS_MT_AMPLITUDE,
 										finger_data[i][3] << 16 | finger_data[i][2]);
@@ -2286,6 +2584,14 @@
 								input_report_abs(ts->input_dev, ABS_MT_POSITION_Y,
 									finger_data[i][1]);
 							} else if (ts->htc_event == SYN_AND_REPORT_TYPE_HTC) {
+#ifdef CONFIG_TOUCHSCREEN_SYNAPTICS_SWEEP2WAKE
+								last_touch_position_x = finger_data[i][0];
+								last_touch_position_y = finger_data[i][1];
+								if (scr_suspended == true) {
+									finger_data[i][0] = -10;
+									finger_data[i][1] = -10;
+								}
+#endif
 								input_report_abs(ts->input_dev, ABS_MT_TRACKING_ID, i);
 								input_report_abs(ts->input_dev, ABS_MT_AMPLITUDE,
 									finger_data[i][3] << 16 | finger_data[i][2]);
@@ -2462,6 +2768,14 @@
 		data == 0x04 ? pr_info("[TP] app key pressed , vk=%x\n", data) :
 		pr_info("[TP] vk=%#x\n", data);
 
+#ifdef CONFIG_TOUCHSCREEN_SYNAPTICS_SWEEP2WAKE
+		if (data == 0x01 || data == 0x02) {
+			last_touch_position_x = 0;
+			last_touch_position_y = 0;
+			button_id = data;
+		}
+		if (!scr_suspended) {
+#endif
 		if (ts->support_htc_event) {
 			input_report_abs(ts->input_dev, ABS_MT_AMPLITUDE, 100 << 16 | 100);
 			input_report_abs(ts->input_dev, ABS_MT_POSITION, x_position << 16 | y_position);
@@ -2474,7 +2788,7 @@
 			input_mt_slot(ts->input_dev, 0);
 			input_mt_report_slot_state(ts->input_dev, MT_TOOL_FINGER, 1);
 			break;
-	}
+		}
 		input_report_abs(ts->input_dev, ABS_MT_TOUCH_MAJOR, 100);
 		input_report_abs(ts->input_dev, ABS_MT_WIDTH_MAJOR, 100);
 		input_report_abs(ts->input_dev, ABS_MT_PRESSURE, 100);
@@ -2487,9 +2801,19 @@
 		case SYN_AND_REPORT_TYPE_B:
 			break;
 		}
+#ifdef CONFIG_TOUCHSCREEN_SYNAPTICS_SWEEP2WAKE
+		}
+#endif
 	} else {
 		printk("[TP] virtual key released\n");
 		vk_press = 0;
+
+#ifdef CONFIG_TOUCHSCREEN_SYNAPTICS_SWEEP2WAKE
+		if (s2w_switch == 1 || s2w_switch == 2) {
+			sweep2wake_func(button_id);
+		}
+		if (!scr_suspended) {
+#endif
 		if (ts->htc_event == SYN_AND_REPORT_TYPE_A) {
 			if (ts->support_htc_event) {
 				input_report_abs(ts->input_dev, ABS_MT_AMPLITUDE, 0);
@@ -2505,8 +2829,17 @@
 			input_mt_slot(ts->input_dev, 0);
 			input_mt_report_slot_state(ts->input_dev, MT_TOOL_FINGER, 0);
 		}
+#ifdef CONFIG_TOUCHSCREEN_SYNAPTICS_SWEEP2WAKE
+		}
+#endif
 	}
+#ifdef CONFIG_TOUCHSCREEN_SYNAPTICS_SWEEP2WAKE
+	if (!scr_suspended) {
+#endif
 	input_sync(ts->input_dev);
+#ifdef CONFIG_TOUCHSCREEN_SYNAPTICS_SWEEP2WAKE
+	}
+#endif
 }
 
 static void synaptics_ts_status_func(struct synaptics_ts_data *ts)
@@ -2581,10 +2914,20 @@
 			}
 		}
 		if (buf & get_address_base(ts, 0x1A, INTR_SOURCE)) {
+#ifdef CONFIG_TOUCHSCREEN_SYNAPTICS_SWEEP2WAKE
+			if (s2w_switch == 0) {
+				if (!ts->finger_count)
+					synaptics_ts_button_func(ts);
+			} else {
+				//pr_info("[TP] [S2W] Ignore VK interrupt due to 2d points did not leave\n");
+				synaptics_ts_button_func(ts);
+			}
+#else
 			if (!ts->finger_count)
 				synaptics_ts_button_func(ts);
 			else
 				printk("[TP] Ignore VK interrupt due to 2d points did not leave\n");
+#endif
 		}
 		if (buf & get_address_base(ts, 0x01, INTR_SOURCE))
 			synaptics_ts_status_func(ts);
@@ -3292,6 +3635,24 @@
 		printk(KERN_INFO "[TP] %s: error register char device", __func__);
 #endif
 
+#ifdef CONFIG_TOUCHSCREEN_SYNAPTICS_SWEEP2WAKE
+	sweep2wake_pwrdev = input_allocate_device();
+	if (!sweep2wake_pwrdev) {
+		pr_err("[TP] [S2W] Can't allocate suspend autotest power button\n");
+		goto err_alloc_dev;
+	}
+
+	input_set_capability(sweep2wake_pwrdev, EV_KEY, KEY_POWER);
+	sweep2wake_pwrdev->name = "s2w_pwrkey";
+	sweep2wake_pwrdev->phys = "s2w_pwrkey/input0";
+
+	ret = input_register_device(sweep2wake_pwrdev);
+	if (ret) {
+		pr_err("[TP] [S2W] %s: input_register_device err=%d\n", __func__, ret);
+		goto err_input_dev;
+	}
+#endif
+
 	printk(KERN_INFO "[TP] synaptics_ts_probe: Start touchscreen %s in %s mode\n", ts->input_dev->name, ts->use_irq ? "interrupt" : "polling");
 
 	return 0;
@@ -3304,6 +3665,14 @@
 		destroy_workqueue(ts->syn_wq);
 #endif
 
+#ifdef CONFIG_TOUCHSCREEN_SYNAPTICS_SWEEP2WAKE
+err_input_dev:
+	input_free_device(sweep2wake_pwrdev);
+	sweep2wake_pwrdev = NULL;
+err_alloc_dev:
+	pr_info("[TP] [S2W] %s done\n", __func__);
+#endif
+
 err_create_wq_failed:
 
 err_get_intr_bit_failed:
@@ -3403,6 +3772,14 @@
 		input_unregister_device(ts->sr_input_dev);
 	input_unregister_device(ts->input_dev);
 
+#ifdef CONFIG_TOUCHSCREEN_SYNAPTICS_SWEEP2WAKE
+	if (sweep2wake_pwrdev != NULL) {
+		input_unregister_device(sweep2wake_pwrdev);
+		input_free_device(sweep2wake_pwrdev);
+		sweep2wake_pwrdev = NULL;
+	}
+#endif
+
 	synaptics_touch_sysfs_remove();
 
 	if(ts->report_data != NULL)
@@ -3422,12 +3799,31 @@
 	struct synaptics_ts_data *ts = i2c_get_clientdata(client);
 	printk(KERN_INFO "[TP] %s: enter\n", __func__);
 
+#ifdef CONFIG_TOUCHSCREEN_SYNAPTICS_SWEEP2WAKE
+	if (s2w_switch == 1 || dt2w_switch > 0) {
+		//screen off, enable_irq_wake
+		enable_irq_wake(client->irq);
+	}
+#endif
+
 	if (ts->use_irq) {
+#ifdef CONFIG_TOUCHSCREEN_SYNAPTICS_SWEEP2WAKE
+		if ((s2w_switch == 2 || s2w_switch == 0) && dt2w_switch == 0) {
+#endif
 		disable_irq(client->irq);
 		ts->irq_enabled = 0;
+#ifdef CONFIG_TOUCHSCREEN_SYNAPTICS_SWEEP2WAKE
+		}
+#endif
 	} else {
 		hrtimer_cancel(&ts->timer);
 		ret = cancel_work_sync(&ts->work);
+#ifdef CONFIG_TOUCHSCREEN_SYNAPTICS_SWEEP2WAKE
+		if ((s2w_switch == 2 || s2w_switch == 0) && dt2w_switch == 0) {
+			if (ret && ts->use_irq) /* if work was pending disable-count is now 2 */
+				enable_irq(client->irq);
+		}
+#endif
 	}
 
 	if(ts->psensor_detection) {
@@ -3593,6 +3989,9 @@
 		ts->disable_CBC = 0;
 	}
 
+#ifdef CONFIG_TOUCHSCREEN_SYNAPTICS_SWEEP2WAKE
+	if ((s2w_switch == 2 || s2w_switch == 0) && dt2w_switch == 0) {
+#endif
 	if (ts->power)
 		ts->power(0);
 	else {
@@ -3622,6 +4021,10 @@
 			ts->lpm_power(1);
 	}
 
+#ifdef CONFIG_TOUCHSCREEN_SYNAPTICS_SWEEP2WAKE
+	}
+	scr_suspended = true;
+#endif
 	if ((ts->block_touch_time_near | ts->block_touch_time_far) && ts->block_touch_event) {
 		syn_handle_block_touch(ts, 0);
 	}
@@ -3635,6 +4038,13 @@
 	struct synaptics_ts_data *ts = i2c_get_clientdata(client);
 	printk(KERN_INFO "[TP] %s: enter\n", __func__);
 
+#ifdef CONFIG_TOUCHSCREEN_SYNAPTICS_SWEEP2WAKE
+	//screen on, disable_irq_wake
+	if (s2w_switch == 1 || dt2w_switch > 0)
+		disable_irq_wake(client->irq);
+
+	if ((s2w_switch == 2 || s2w_switch == 0) && dt2w_switch == 0) {
+#endif
 	if (ts->power) {
 		ts->power(1);
 		hr_msleep(100);
@@ -3654,6 +4064,9 @@
 			i2c_syn_error_handler(ts, ts->i2c_err_handler_en, "wake up", __func__);
 	}
 
+#ifdef CONFIG_TOUCHSCREEN_SYNAPTICS_SWEEP2WAKE
+	}
+#endif
 	if (ts->htc_event == SYN_AND_REPORT_TYPE_A) {
 		if (ts->support_htc_event) {
 			input_report_abs(ts->input_dev, ABS_MT_AMPLITUDE, 0);
@@ -3680,6 +4093,9 @@
 		}
 	}
 
+#ifdef CONFIG_TOUCHSCREEN_SYNAPTICS_SWEEP2WAKE
+	if ((s2w_switch == 2 || s2w_switch == 0) && dt2w_switch == 0) {
+#endif
 	if (ts->use_irq) {
 		enable_irq(client->irq);
 		ts->irq_enabled = 1;
@@ -3687,6 +4103,10 @@
 	else
 		hrtimer_start(&ts->timer, ktime_set(1, 0), HRTIMER_MODE_REL);
 
+#ifdef CONFIG_TOUCHSCREEN_SYNAPTICS_SWEEP2WAKE
+	}
+	scr_suspended = false;
+#endif
 	return 0;
 }
 
